Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/magnofonseca/.local/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/105ab92e558945fa81ff6ab7b6f43827-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/105ab92e558945fa81ff6ab7b6f43827-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 1445 COLUMNS
At line 10278 RHS
At line 11719 BOUNDS
At line 12744 ENDATA
Problem MODEL has 1440 rows, 1024 columns and 5760 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 19156 - 0.02 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 277 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 252 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 239 strengthened rows, 0 substitutions
Cgl0004I processed model has 672 rows, 1024 columns (1024 integer (1024 of which binary)) and 3552 elements
Cutoff increment increased from 1e-05 to 1.9999
Cbc0038I Initial state - 27 integers unsatisfied sum - 8.36667
Cbc0038I Pass   1: suminf.    3.80000 (14) obj. 19380 iterations 119
Cbc0038I Pass   2: suminf.    3.30000 (12) obj. 19436 iterations 7
Cbc0038I Pass   3: suminf.    0.80000 (4) obj. 19854 iterations 49
Cbc0038I Pass   4: suminf.    0.40000 (2) obj. 19878 iterations 4
Cbc0038I Solution found of 19942
Cbc0038I Before mini branch and bound, 984 integers at bound fixed and 0 continuous
Cbc0038I Full problem 672 rows 1024 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.18 seconds)
Cbc0038I Round again with cutoff of 19861.6
Cbc0038I Pass   5: suminf.    3.80000 (14) obj. 19380 iterations 0
Cbc0038I Pass   6: suminf.    3.30000 (12) obj. 19436 iterations 7
Cbc0038I Pass   7: suminf.    0.80000 (4) obj. 19854 iterations 35
Cbc0038I Pass   8: suminf.    0.40000 (3) obj. 19861.6 iterations 20
Cbc0038I Pass   9: suminf.    1.13667 (4) obj. 19861.6 iterations 61
Cbc0038I Pass  10: suminf.    0.67000 (2) obj. 19861.6 iterations 5
Cbc0038I Pass  11: suminf.    0.80000 (3) obj. 19754 iterations 57
Cbc0038I Pass  12: suminf.    0.70333 (3) obj. 19861.6 iterations 51
Cbc0038I Pass  13: suminf.    8.85556 (33) obj. 19861.6 iterations 260
Cbc0038I Pass  14: suminf.    3.36667 (14) obj. 19861.6 iterations 133
Cbc0038I Pass  15: suminf.    3.20000 (13) obj. 19861.6 iterations 13
Cbc0038I Pass  16: suminf.    2.70000 (11) obj. 19824 iterations 9
Cbc0038I Pass  17: suminf.    2.60400 (8) obj. 19861.6 iterations 78
Cbc0038I Pass  18: suminf.    1.70000 (8) obj. 19861.6 iterations 66
Cbc0038I Pass  19: suminf.    1.70000 (8) obj. 19861.6 iterations 4
Cbc0038I Pass  20: suminf.    1.72400 (7) obj. 19861.6 iterations 66
Cbc0038I Pass  21: suminf.    0.96421 (4) obj. 19861.6 iterations 52
Cbc0038I Pass  22: suminf.    0.80000 (2) obj. 19794 iterations 46
Cbc0038I Solution found of 19782
Cbc0038I Before mini branch and bound, 858 integers at bound fixed and 0 continuous
Cbc0038I Full problem 672 rows 1024 columns, reduced to 82 rows 165 columns
Cbc0038I Mini branch and bound did not improve solution (0.39 seconds)
Cbc0038I Round again with cutoff of 19655.2
Cbc0038I Pass  23: suminf.    3.80000 (14) obj. 19380 iterations 0
Cbc0038I Pass  24: suminf.    3.30000 (12) obj. 19436 iterations 7
Cbc0038I Pass  25: suminf.    1.96191 (6) obj. 19655.2 iterations 78
Cbc0038I Pass  26: suminf.    1.90000 (6) obj. 19650 iterations 65
Cbc0038I Pass  27: suminf.   10.60768 (37) obj. 19655.2 iterations 286
Cbc0038I Pass  28: suminf.    4.20000 (13) obj. 19655.2 iterations 121
Cbc0038I Pass  29: suminf.    2.70000 (11) obj. 19655.2 iterations 16
Cbc0038I Pass  30: suminf.    4.20000 (14) obj. 19655.2 iterations 80
Cbc0038I Pass  31: suminf.    4.00000 (14) obj. 19655.2 iterations 20
Cbc0038I Pass  32: suminf.    4.00000 (14) obj. 19655.2 iterations 19
Cbc0038I Pass  33: suminf.    3.51500 (13) obj. 19655.2 iterations 68
Cbc0038I Pass  34: suminf.    2.60000 (10) obj. 19655.2 iterations 56
Cbc0038I Pass  35: suminf.    2.60000 (10) obj. 19655.2 iterations 7
Cbc0038I Pass  36: suminf.    3.01091 (11) obj. 19655.2 iterations 64
Cbc0038I Pass  37: suminf.    2.00000 (8) obj. 19655.2 iterations 82
Cbc0038I Pass  38: suminf.    2.00000 (8) obj. 19655.2 iterations 4
Cbc0038I Pass  39: suminf.    2.02800 (8) obj. 19655.2 iterations 44
Cbc0038I Pass  40: suminf.    1.60000 (7) obj. 19655.2 iterations 51
Cbc0038I Pass  41: suminf.    2.20000 (8) obj. 19655.2 iterations 75
Cbc0038I Pass  42: suminf.    2.00000 (8) obj. 19655.2 iterations 16
Cbc0038I Pass  43: suminf.    2.00000 (8) obj. 19655.2 iterations 9
Cbc0038I Pass  44: suminf.    2.02800 (8) obj. 19655.2 iterations 44
Cbc0038I Pass  45: suminf.    1.60000 (7) obj. 19655.2 iterations 53
Cbc0038I Pass  46: suminf.    2.20000 (8) obj. 19655.2 iterations 80
Cbc0038I Pass  47: suminf.    2.00000 (8) obj. 19655.2 iterations 21
Cbc0038I Pass  48: suminf.    2.00000 (8) obj. 19655.2 iterations 7
Cbc0038I Pass  49: suminf.    2.02800 (8) obj. 19655.2 iterations 45
Cbc0038I Pass  50: suminf.    1.60000 (7) obj. 19655.2 iterations 62
Cbc0038I Pass  51: suminf.    2.20000 (8) obj. 19655.2 iterations 77
Cbc0038I Pass  52: suminf.    2.00000 (8) obj. 19655.2 iterations 21
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 842 integers at bound fixed and 0 continuous
Cbc0038I Full problem 672 rows 1024 columns, reduced to 92 rows 182 columns
Cbc0038I Mini branch and bound improved solution from 19782 to 19482 (0.67 seconds)
Cbc0038I Round again with cutoff of 19382.8
Cbc0038I Pass  52: suminf.    3.80000 (14) obj. 19380 iterations 0
Cbc0038I Pass  53: suminf.    3.30000 (13) obj. 19382.8 iterations 27
Cbc0038I Pass  54: suminf.    3.00000 (9) obj. 19382.8 iterations 79
Cbc0038I Pass  55: suminf.    3.00000 (9) obj. 19382.8 iterations 71
Cbc0038I Pass  56: suminf.    2.89167 (10) obj. 19382.8 iterations 55
Cbc0038I Pass  57: suminf.    2.57500 (10) obj. 19382.8 iterations 24
Cbc0038I Pass  58: suminf.    2.50000 (10) obj. 19382.8 iterations 92
Cbc0038I Pass  59: suminf.    2.50000 (10) obj. 19382.8 iterations 7
Cbc0038I Pass  60: suminf.    2.69999 (10) obj. 19382.8 iterations 79
Cbc0038I Pass  61: suminf.    2.60000 (9) obj. 19382.8 iterations 44
Cbc0038I Pass  62: suminf.    2.93333 (9) obj. 19382.8 iterations 43
Cbc0038I Pass  63: suminf.    2.29167 (9) obj. 19382.8 iterations 11
Cbc0038I Pass  64: suminf.    2.29167 (10) obj. 19382.8 iterations 6
Cbc0038I Pass  65: suminf.    2.60000 (12) obj. 19382.8 iterations 88
Cbc0038I Pass  66: suminf.    2.10000 (10) obj. 19382.8 iterations 21
Cbc0038I Pass  67: suminf.    3.81905 (11) obj. 19382.8 iterations 81
Cbc0038I Pass  68: suminf.    2.84762 (9) obj. 19382.8 iterations 22
Cbc0038I Pass  69: suminf.    2.90000 (10) obj. 19382.8 iterations 96
Cbc0038I Pass  70: suminf.    2.70000 (10) obj. 19382.8 iterations 15
Cbc0038I Pass  71: suminf.    2.70000 (10) obj. 19382.8 iterations 3
Cbc0038I Pass  72: suminf.    2.60000 (9) obj. 19382.8 iterations 85
Cbc0038I Pass  73: suminf.    2.60000 (9) obj. 19382.8 iterations 9
Cbc0038I Pass  74: suminf.    2.87428 (10) obj. 19382.8 iterations 58
Cbc0038I Pass  75: suminf.    2.60000 (9) obj. 19382.8 iterations 61
Cbc0038I Pass  76: suminf.    3.00000 (10) obj. 19382.8 iterations 52
Cbc0038I Pass  77: suminf.    3.00000 (10) obj. 19382.8 iterations 15
Cbc0038I Pass  78: suminf.    3.48857 (11) obj. 19382.8 iterations 75
Cbc0038I Pass  79: suminf.    2.40000 (8) obj. 19382.8 iterations 44
Cbc0038I Pass  80: suminf.    2.40000 (8) obj. 19382.8 iterations 11
Cbc0038I Pass  81: suminf.    2.96118 (9) obj. 19382.8 iterations 67
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 969 integers at bound fixed and 0 continuous
Cbc0038I Full problem 672 rows 1024 columns, reduced to 25 rows 44 columns
Cbc0038I Mini branch and bound did not improve solution (0.86 seconds)
Cbc0038I After 0.86 seconds - Feasibility pump exiting with objective of 19482 - took 0.70 seconds
Cbc0012I Integer solution of 19482 found by feasibility pump after 0 iterations and 0 nodes (0.86 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 57 rows 80 columns
Cbc0031I 21 added rows had average density of 78.380952
Cbc0013I At root node, 21 cuts changed objective from 19156 to 19156 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 143 row cuts average 410.9 elements, 0 column cuts (0 active)  in 0.100 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 69 row cuts average 17.8 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 104 row cuts average 125.6 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 47 row cuts average 36.4 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 19482 best solution, best possible 19156 (1.29 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 69 rows 125 columns
Cbc0038I Full problem 672 rows 1024 columns, reduced to 70 rows 122 columns
Cbc0038I Full problem 672 rows 1024 columns, reduced to 72 rows 127 columns
Cbc0038I Full problem 672 rows 1024 columns, reduced to 80 rows 138 columns
Cbc0038I Full problem 672 rows 1024 columns, reduced to 81 rows 157 columns
Cbc0004I Integer solution of 19162 found after 7884 iterations and 448 nodes (4.03 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 54 rows 85 columns
Cbc0038I Full problem 672 rows 1024 columns, reduced to 48 rows 75 columns
Cbc0038I Full problem 672 rows 1024 columns, reduced to 56 rows 83 columns
Cbc0038I Full problem 672 rows 1024 columns, reduced to 51 rows 76 columns
Cbc0010I After 1000 nodes, 404 on tree, 19162 best solution, best possible 19156 (5.45 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 77 rows 141 columns
Cbc0010I After 2000 nodes, 465 on tree, 19162 best solution, best possible 19156 (7.51 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 73 rows 124 columns
Cbc0038I Full problem 672 rows 1024 columns, reduced to 71 rows 121 columns
Cbc0010I After 3000 nodes, 459 on tree, 19162 best solution, best possible 19156 (11.17 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 85 rows 144 columns
Cbc0010I After 4000 nodes, 494 on tree, 19162 best solution, best possible 19156 (14.34 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 84 rows 138 columns
Cbc0010I After 5000 nodes, 503 on tree, 19162 best solution, best possible 19156 (16.39 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 83 rows 150 columns
Cbc0010I After 6000 nodes, 574 on tree, 19162 best solution, best possible 19156 (18.58 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 76 rows 139 columns
Cbc0010I After 7000 nodes, 571 on tree, 19162 best solution, best possible 19156 (20.50 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 77 rows 142 columns
Cbc0010I After 8000 nodes, 570 on tree, 19162 best solution, best possible 19156 (22.42 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 80 rows 144 columns
Cbc0010I After 9000 nodes, 571 on tree, 19162 best solution, best possible 19156 (24.87 seconds)
Cbc0038I Full problem 672 rows 1024 columns, reduced to 90 rows 154 columns
Cbc0010I After 10000 nodes, 661 on tree, 19162 best solution, best possible 19156 (26.56 seconds)
Cbc0010I After 11000 nodes, 661 on tree, 19162 best solution, best possible 19156 (28.24 seconds)
Cbc0010I After 12000 nodes, 1179 on tree, 19162 best solution, best possible 19156 (32.33 seconds)
Cbc0004I Integer solution of 19156 found after 159101 iterations and 12060 nodes (32.49 seconds)
Cbc0001I Search completed - best objective 19156, took 159101 iterations and 12060 nodes (32.52 seconds)
Cbc0032I Strong branching done 22528 times (168510 iterations), fathomed 1456 nodes and fixed 1311 variables
Cbc0035I Maximum depth 219, 10769 variables fixed on reduced cost
Cuts at root node changed objective from 19156 to 19156
Probing was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.020 seconds)
Gomory was tried 10 times and created 143 cuts of which 0 were active after adding rounds of cuts (0.100 seconds)
Knapsack was tried 10 times and created 69 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
TwoMirCuts was tried 10 times and created 104 cuts of which 0 were active after adding rounds of cuts (0.021 seconds)
ZeroHalf was tried 10 times and created 47 cuts of which 0 were active after adding rounds of cuts (0.031 seconds)

Result - Optimal solution found

Objective value:                19156.00000000
Enumerated nodes:               12060
Total iterations:               159101
Time (CPU seconds):             28.24
Time (Wallclock seconds):       32.55

Option for printingOptions changed from normal to all
Total time (CPU seconds):       28.25   (Wallclock seconds):       32.57